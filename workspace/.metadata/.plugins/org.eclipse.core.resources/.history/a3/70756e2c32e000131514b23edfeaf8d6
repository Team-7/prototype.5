package com.dhliwayok.hopeworldwide;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.HashMap;

import org.apache.http.HttpResponse;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.DefaultHttpClient;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import android.app.Activity;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.SharedPreferences;
import android.database.Cursor;
import android.graphics.Color;
import android.os.AsyncTask;
import android.os.Bundle;
import android.util.Log;
import android.view.KeyEvent;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;



public class LoginActivity extends Activity {
	Button btnLogin;
	Button btnLinkToRegister;
	EditText username;
	EditText password;
	TextView loginErrorMsg;
	HopeDbAdapter mydb;
	private static String name;
	private MySharePref mypref;
	private static int centreID;
	private MyConnect connect;
	
	
	// JSON Response node names
	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.login2);
		
		mypref = new MySharePref(this);
		IntentFilter intentFilter = new IntentFilter();
		intentFilter.addAction("CLEAR_STACK");
		BroadcastReceiver r;
		r = new ActivitiesBroadcastReceiver();
		registerReceiver(r, intentFilter);

		// Importing all assets like buttons, text fields
		username = (EditText) findViewById(R.id.loginEmail);
		password = (EditText) findViewById(R.id.loginPassword);
		btnLogin = (Button) findViewById(R.id.btnLogin);
		loginErrorMsg = (TextView) findViewById(R.id.login_error);
		mydb = new HopeDbAdapter(this);
		connect = new MyConnect(mydb);
	
		if(mypref.checkKey("username")){
			try {
				startActivity(new Intent(LoginActivity.this, Menu.class));
				name = mydb.LoginName(mypref.getMyPref("username"), mypref.getMyPref("password"));
				
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		

		// Login button Click Event
		btnLogin.setOnClickListener(new View.OnClickListener() {

			public void onClick(View view) {
				String usename = username.getText().toString();
				String passWord = password.getText().toString();
				//UserFunctions userFunction = new UserFunctions();
				Log.d("Button", "Login");

				if (username.length() > 0 && password.length() > 0) {
					try {

						if (mydb.Login(usename, passWord)) {
							mypref.saveMyPrefValue("username", usename);
							mypref.saveMyPrefValue("password", passWord);
							new Sync(usename, passWord).execute();
							//Message.message(LoginActivity.this, "Successfully Logged In");
							try {
								startActivity(new Intent(LoginActivity.this, Menu.class));
								name = mydb.LoginName(usename, passWord);
								new GetInfo().execute();
								
							} catch (Exception e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
							
						} else {
							//Message.message(LoginActivity.this,"Invalid username or password");
							loginErrorMsg.setTextColor(Color.RED);
							loginErrorMsg.setText("Invalid username or password");
					}

					} catch (Exception e) {
						//Message.message(LoginActivity.this,"Some problem occurred"+e); 
						loginErrorMsg.setTextColor(Color.RED);
						loginErrorMsg.setText("Some problem occurred"+e);
					}
				} else {
					//Message.message(LoginActivity.this,"Username or Password is empty");
					loginErrorMsg.setTextColor(Color.RED);
					loginErrorMsg.setText("Empty Username or Password");
					//JSONObject json = userFunction.loginUser(email, password);

					// check for login response
				}
			}

		});
		

	}		// Link to Register Screen
	
	public static String getName(){
		return name;
		
	}
	

	/* (non-Javadoc)
	 * @see android.app.Activity#onKeyDown(int, android.view.KeyEvent)
	 */
	@Override
	public boolean onKeyDown(int keyCode, KeyEvent event) {//if back button pressed, exit

		// TODO Auto-generated method stub
		Intent broadcastIntent = new Intent();
		broadcastIntent.setAction("CLEAR_STACK");
		sendBroadcast(broadcastIntent);
		return super.onKeyDown(keyCode, event);
	}

	class ActivitiesBroadcastReceiver extends BroadcastReceiver {
		
		@Override
		public void onReceive(Context context, Intent intent) {
			// TODO Auto-generated method stub
			finish();
		}
	}
	
	
	private class Sync extends AsyncTask{
		
		private String user;
		private String password;
		private String result = "";
		
		public Sync(String username, String password){
			this.user = username;
			this.password = password;
		}
				
		@Override
		protected Object doInBackground(Object... params) {
			// TODO Auto-generated method stub
			if(sendUsername()){
				//bmi1= true;
				System.out.println("successful");
			}
			
			return null;
		}
		
		
		private boolean sendUsername(){
			
			JSONArray jsonarray;
			JSONObject json ;// new JSONObject();
			boolean x = false;
		    	  //System.out.println(cs.getCount());
		      
				   jsonarray = new JSONArray();
		           json = new JSONObject();  
		      try {  
		           json.put("Username",user);  
		           json.put("Password", password);  
		           jsonarray.put(json);  
		      }  
		      catch (Exception e) {  
		           Log.d("Android", "JSON Error"+e);  
		      }  
		            
		           try {  
		           // Create a new HttpClient and Post Header  
		           HttpClient httpclient = new DefaultHttpClient();  
		           HttpPost httppost = new HttpPost("http://10.0.2.2/sync/Connections/customCon.php");  
		           // Post the data:  
		           StringEntity se = new StringEntity(jsonarray.toString());  
		           httppost.setEntity(se);  
		           httppost.setHeader("Accept", "application/json");  
		           httppost.setHeader("Content-type", "application/json");  
		           // Execute HTTP Post Request  
		           System.out.print(jsonarray.toString());  
		           HttpResponse response = httpclient.execute(httppost);  
		           // for JSON:  
		           if(response != null)  
		           {  
		                InputStream is = response.getEntity().getContent();  
		                BufferedReader reader = new BufferedReader(new InputStreamReader(is));  
		                StringBuilder sb = new StringBuilder();  
		                String line = null;  
		                try {  
		                     while ((line = reader.readLine()) != null) {  
		                     sb.append(line + "\n");  
		                     }  
		                     x = true;
		                     result = sb.toString();
		                     System.out.println(result);
		                } catch (IOException e) {  
		                     e.printStackTrace();  
		                     }   
		                finally {  
		                     try {  
		                          is.close();  
		                     } catch (IOException e) {  
		                                         e.printStackTrace();  
		                                    }  
		                               }  
		                          }  
		           }  
		           catch (ClientProtocolException e) {                 
		           } catch (IOException e) {   
		        }  
		        
		           try{
		          	 JSONArray jArray = new JSONArray(result);
		          	  
		               for(int i=0;i<jArray.length();i++){  
		                   JSONObject json_data = jArray.getJSONObject(i);  
		                   //String querylog= "insert or replace into table(a,b,c) values('"+json_data.getString("a")+"','"+json_data.getString("b")+"','"+json_data.getString("c")+"')";  
		                   //Log.e("log_tag", json_data.getString("child_name"));
		                   
		                   centreID =json_data.getInt("centre_id");
		                  	 x = true;
		               }
		          	}
		          catch (JSONException e){   
		          Log.e("log_tag", "Error parsing data "+e.toString());  
		          } 
		       
		      
		      return x;
		      
		}

	}

	public static int getCenterID(){
		return centreID;
		
	}
	
	private class GetInfo extends AsyncTask{

		@Override
		protected Object doInBackground(Object... params) {
			// TODO Auto-generated method stub
			if(connect.parseJSON(centreID))
				System.out.println("successful"+centreID);
			
			if(connect.getBmi(centreID))
				System.out.println("successful");
			
			if(connect.getChild_Bmi(centreID))
				System.out.println("successful");
			return null;
		}
		
	}
	
	
}




